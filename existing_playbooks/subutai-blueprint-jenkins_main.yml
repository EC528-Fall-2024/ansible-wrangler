# Ansible Playbook for Subutai Jenkins Blueprint
---

- hosts: jenkins
  remote_user: root
  tasks:

    - name: Upgrade debian
      apt:
        update_cache: true
        upgrade: true

    - name: Install required debs
      apt:
        name: "{{ packages }}"
      vars: 
        packages:
        - default-jre
        - ca-certificates
        - xz-utils
        - python3-apt
     
#    - name: Add an Apt signing key
#      apt_key:
#        url: https://pkg.jenkins.io/debian/jenkins.io.key
#        state: present

#    - name: Add jenkins repository
#      apt_repository:
#        repo: deb http://pkg.jenkins.io/debian-stable binary/
#        state: present
#        update_cache: true

#    - name: Install jenkins
#      apt: 
#        name: jenkins
#        state: present
#        update_cache: yes

    - name: Install a jenkins 2.164.3.deb package from the internet.
      apt:
        deb: https://ipfs.subutai.io/ipfs/Qmf3svqv8WJSU42q1T3751Jr9oaKDexgrzNWyxa4bEiRmb/jenkins_2.164.3_all.deb

    - name: Wait until the file "initialAdminPassword" is present before continuing
      wait_for:
        path: /var/lib/jenkins/secrets/initialAdminPassword   

    - name: read admin pwd
      shell: cat /var/lib/jenkins/secrets/initialAdminPassword
      register: adminpwd

    - name: Wait for port 8080 to become open on the host, don't start checking for 10 seconds
      wait_for:
        port: 8080
        delay: 30

    - name: unlock and add admin user
      jenkins_script:
        script: |
          import jenkins.model.*
          import hudson.security.*
          def instance = Jenkins.getInstance()
          def hudsonRealm = new HudsonPrivateSecurityRealm(false)
          hudsonRealm.createAccount('admin', '${user_pwd}')
          instance.setSecurityRealm(hudsonRealm)
          def strategy = new FullControlOnceLoggedInAuthorizationStrategy()
          strategy.setAllowAnonymousRead(false)
          instance.setAuthorizationStrategy(strategy)
          instance.save()
        args:
          user_pwd: "{{ admin_user_pass }}"
        user: admin
        password: "{{ adminpwd.stdout }}"

    - name: complete setup wizard
      jenkins_script:
        script: |
          import static jenkins.model.Jenkins.instance as jenkins
          import jenkins.install.InstallState
          if (!jenkins.installState.isSetupComplete()) {
            InstallState.INITIAL_SETUP_COMPLETED.initializeState()
          }
        user: admin
        password: "{{ admin_user_pass }}"

    # - name: Change Jenkins JAVA options
    #   lineinfile: 
    #     dest: /etc/default/jenkins
    #     regexp: ^JENKINS_ARGS=
    #     line: JENKINS_ARGS="--webroot=/var/cache/$NAME/war --httpPort=$HTTP_PORT --httpListenAddress=127.0.0.1"

    - name: Restart jenkins
      systemd: 
        name: jenkins.service
        state: restarted
